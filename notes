1. installed webpack , webpack-dev-server  : this is for bundling the code base.
2. installed babel (@babel/core | @babel/cli | @babel/preset-env | @babel/) : to transform ES6 syntax to common js which the browser can understand
3. installed react | react-dom : to use the react environment.
4. created an "index.js" file in the root folder.
5. created an "index.html" inside the src folder : where the react app will be rendered to the DOM.
6. created "webpack.config.js" file and added the webpack configuration code such as the entry, output, module, plugins and devServer.
7. created a .babelrc file where the babel plugin and preset is set.
8. installed html-webpack-plugin so i can use my "index.html" file as template.
9. created the react components
10. installed few react component libraries.
11. created the app layout components.
12. installed react-apollo | apollo-boost | graphql so i can connect my frontend app to my backend app.
13. got an error on arrow functions : the solution was to install (@babel/plugin-proposal-class-properties)

NOTE:

1. Webpack
    --> a module bundler.
    --> Bundling process: 
        1. Entry: evaluates entry matches based on loader config
        2. Loaders: resolves against any file type.
        3. Plugins: intercept runtime.
        4. Output: what the result file will be specified.
        3. devServer: to add development convenience configs.

2. package.json
    --> environment configuration file for app built on the Node ecosystem


3. caret symbol in package.json
    --> So if you see ~1.0.2 it means to install version 1.0.2 or the latest patch version such as 1.0.4. If you see ^1.0.2 it means to install version 1.0.2 or the latest minor or patch version such as 1.1.0

    https://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/


4. async & await
    --> async: an async function returns a promise, to perform a non-blocking process.
    --> await: only works inside the async function, to wait for a promise to be settled and returns its result.

5. Shallow vs Deep Object Copy
    --> Shallow: Copies the memory allocation of the copied object,
    --> Deep: Copies all the values of a object and gets it's own memory allocation.

5. redux
    -->


4. react lifecycle
    -->

4. Key prop in mapped list:
    --> Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:

6. create a module with the following requirements:
    ⭕ CRUD for Data
    ⭕ Sort data
    ⭕ Arrow Functions (if applicable)
    ⭕ Spread operator
    ⭕ object destructuring
    ⭕ utilize react life cycles (if applicable)
